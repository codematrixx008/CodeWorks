public static string GenerateInsertUpdateProcSql(SQLTableModel tempTable, SQLTableModel permanentTable) {
  var sb = new StringBuilder();

  string procName = $ "InsertUpdate{permanentTable.TableName}Data";

  sb.AppendLine($ "CREATE PROCEDURE {procName}");
  sb.AppendLine("AS");
  sb.AppendLine("BEGIN");
  sb.AppendLine("    SET NOCOUNT ON;");
  sb.AppendLine();

  // MERGE statement
  sb.AppendLine($ "    MERGE INTO [{permanentTable.TableName}] AS Target");
  sb.AppendLine($ "    USING [{tempTable.TableName}] AS Source");
  sb.AppendLine($ "    ON Target.[{permanentTable.PrimaryKeyColumn}] = Source.[{tempTable.PrimaryKeyColumn}]");
  sb.AppendLine("    WHEN MATCHED THEN");
  sb.AppendLine("        UPDATE SET");

  // Generate update column mappings (skip primary key)
  var updateColumns = permanentTable.Columns.Where(c =>!c.Equals(permanentTable.PrimaryKeyColumn, StringComparison.OrdinalIgnoreCase)).ToList();

  for (int i = 0; i < updateColumns.Count; i++) {
    string col = updateColumns[i];
    string comma = (i == updateColumns.Count - 1) ? "": ",";
    sb.AppendLine($ "            Target.[{col}] = Source.[{col}]{comma}");
  }

  // Insert mapping
  sb.AppendLine("    WHEN NOT MATCHED BY TARGET THEN");
  sb.AppendLine("        INSERT (");

  for (int i = 0; i < permanentTable.Columns.Count; i++) {
    string col = permanentTable.Columns[i];
    string comma = (i == permanentTable.Columns.Count - 1) ? "": ",";
    sb.AppendLine($ "            [{col}]{comma}");
  }

  sb.AppendLine("        )");
  sb.AppendLine("        VALUES (");

  for (int i = 0; i < permanentTable.Columns.Count; i++) {
    string col = permanentTable.Columns[i];
    string comma = (i == permanentTable.Columns.Count - 1) ? "": ",";
    sb.AppendLine($ "            Source.[{col}]{comma}");
  }

  sb.AppendLine("        );");

  // Optional: Clear temp table
  sb.AppendLine();
  sb.AppendLine($ "    DELETE FROM [{tempTable.TableName}];");

  sb.AppendLine("END;");

  return sb.ToString();
}
